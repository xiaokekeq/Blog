import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r,o as t,c as o,a,d as s,e,b as l}from"./app-9VNL1xHc.js";const c="/Blog/assets/image-20240526155822350-BINO42w2.png",d="/Blog/assets/image-20240526155846337-npiPUl4E.png",p={},u=a("h1",{id:"docker部署",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#docker部署"},[a("span",null,"Docker部署")])],-1),m=a("p",null,"首先在阿里云购买服务器，我现在选用的是centor OS8",-1),v=a("p",null,"使用Xshell来连接远程服务器",-1),b=a("figure",null,[a("img",{src:c,alt:"image-20240526155822350",tabindex:"0",loading:"lazy"}),a("figcaption",null,"image-20240526155822350")],-1),h=a("p",null,"然后再输入相应的用户名和密码",-1),k=a("figure",null,[a("img",{src:d,alt:"image-20240526155846337",tabindex:"0",loading:"lazy"}),a("figcaption",null,"image-20240526155846337")],-1),g={href:"https://docs.docker.com/engine/install/centos/",target:"_blank",rel:"noopener noreferrer"},f=l(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils <span class="token comment">#先安装utils</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>换源</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum-config-manager <span class="token punctuation">\\</span>
    --add-repo <span class="token punctuation">\\</span>
    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就可以直接安装docker了</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完成，启动</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl start <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于在application.yml中数据库和redis中的地址都换为了名称，docker支持在同一网络下使用名称来访问应用，所以需要自己创建一个网络。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> network create indoorApp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="java的dockerfile" tabindex="-1"><a class="header-anchor" href="#java的dockerfile"><span>java的dockerfile</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 使用17镜像作为基础镜像</span>
FROM openjdk:17
<span class="token comment"># 指定允许文件路径</span>
<span class="token comment"># 作者：xiaoke</span>
WORKDIR /usr/local/java
<span class="token comment"># 设定时区</span>
ENV <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai
RUN <span class="token function">ln</span> <span class="token parameter variable">-snf</span> /usr/share/zoneinfo/<span class="token variable">$TZ</span> /etc/localtime <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$TZ</span> <span class="token operator">&gt;</span> /etc/timezone
<span class="token comment"># 把jar包复制到镜像中</span>
COPY indoorapp_backend.jar ./app.jar
<span class="token comment"># 暴露端口号</span>
EXPOSE <span class="token number">8080</span>
<span class="token comment"># 启动应用</span>
CMD <span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span>,<span class="token string">&quot;-jar&quot;</span>,<span class="token string">&quot;/usr/local/java/indoorapp_backend.jar&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="java应用镜像构建" tabindex="-1"><a class="header-anchor" href="#java应用镜像构建"><span>java应用镜像构建</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> indoorapp:v1 <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="redis-运行-如果没有它会自动安装" tabindex="-1"><a class="header-anchor" href="#redis-运行-如果没有它会自动安装"><span>Redis 运行（如果没有它会自动安装）</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> redis <span class="token parameter variable">--network</span> indoorApp <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">-d</span> redis:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="如果需要删除使用" tabindex="-1"><a class="header-anchor" href="#如果需要删除使用"><span>如果需要删除使用：</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="查看运行的容器" tabindex="-1"><a class="header-anchor" href="#查看运行的容器"><span>查看运行的容器</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token comment">#查看所有的容器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Mysql 运行（如果没有它会自动安装）</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> mysql <span class="token parameter variable">-v</span> mysqldata:/var/lib/mysql <span class="token parameter variable">-v</span> mysqlconf:/etc/mysql/conf.d <span class="token parameter variable">-v</span> mysqllog:/var/log/mysql <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">--network</span> indoorApp <span class="token parameter variable">-e</span> <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> mysql:8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="删除容器" tabindex="-1"><a class="header-anchor" href="#删除容器"><span>删除容器：</span></a></h2><p><code>docker rm NAME/CONTAINER ID</code> 意思是：删除一个容器 NAME：这里是自己要删除容器的名字 CONTAINER ID：这里是自己要删除容器的ID</p><h2 id="运行后端" tabindex="-1"><a class="header-anchor" href="#运行后端"><span>运行后端：</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> indoorapp <span class="token parameter variable">--network</span> indoorApp <span class="token parameter variable">-v</span> /usr/local/java:/usr/local/java <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 indoorapp:v1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装阿里云插件：云监控插件</p><p><strong>curl http://100.100.100.200/latest/meta-data/region-id</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token assign-left variable">ARGUS_VERSION</span><span class="token operator">=</span><span class="token number">3.5</span>.11 /bin/bash <span class="token parameter variable">-c</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> https://cms-agent-ap-southeast-1.oss-ap-southeast-1-internal.aliyuncs.com/Argus/agent_install-1.10.sh<span class="token variable">)</span></span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>docker run --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:latest</p><h2 id="出现1251错误" tabindex="-1"><a class="header-anchor" href="#出现1251错误"><span>出现1251错误</span></a></h2><p>进入mysql设置</p><p>1、进入容器可使用 <code>docker exec -it mysql bash</code>进入，这里不再贴代码了。 2、登录进入mysql ，使用 <code>mysql -uroot -p123456</code>登录mysql数据库 3、给root用户设置密码</p><p><code>alter user &#39;root&#39;@&#39;%&#39; identified with caching_sha2_password by &#39;123456&#39;;</code></p><p>4、刷新权限 <code>flush privileges;</code></p><p>查看容器启动信息：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs <span class="token parameter variable">-f</span> indoorapp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="nginx" tabindex="-1"><a class="header-anchor" href="#nginx"><span>Nginx</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> nginx <span class="token parameter variable">--network</span> indoorApp <span class="token parameter variable">-v</span> /usr/local/nginx/html:/usr/local/nginx/html <span class="token parameter variable">-v</span> /usr/local/nginx/nginx/conf:/etc/nginx/nginx/conf <span class="token parameter variable">-v</span> /usr/local/nginx/nginx.conf:/usr/share/nginx/https <span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000 <span class="token parameter variable">-p</span> <span class="token number">443</span>:443 nginx:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,38),x={href:"https://blog.csdn.net/xiaolong124/article/details/123458100",target:"_blank",rel:"noopener noreferrer"},_=l(`<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>server {
    listen       8848;
    server_name  localhost; # 修改为docker服务宿主机的ip
 
    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
        try_files $uri $uri/ /index.html =404;
    }
 
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   html;
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function y(q,j){const n=r("ExternalLinkIcon");return t(),o("div",null,[u,m,v,b,h,k,a("p",null,[s("安装docker官网地址："),a("a",g,[s("Install Docker Engine on CentOS | Docker Docs"),e(n)])]),f,a("p",null,[s("部署前端参考文档："),a("a",x,[s("Docker容器部署前端Vue服务——手把手教学_docker vue-CSDN博客"),e(n)])]),_])}const A=i(p,[["render",y],["__file","docker.html.vue"]]);export{A as default};
